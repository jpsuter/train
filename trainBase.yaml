esphome:
  name: train-base
  includes: std_includes.h

esp32:
  board: esp32dev
  framework:
    type: esp-idf

logger:

api:

ota:
  platform: esphome

#ethernet:
#  type: LAN8720
#  mdc_pin: GPIO23
#  mdio_pin: GPIO18
#  clk_mode: GPIO17_OUT
#  phy_addr: 0
wifi:
  ssid: !secret SSID
  password: !secret password
  manual_ip:
    static_ip: 10.4.200.235
    gateway: 10.4.200.254
    subnet: 255.255.255.0

i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

pca9685:
  - id: pca9685_hub1
    frequency: 500

mqtt:
  broker: 10.4.200.220
  discovery: false
  username: !secret mqtt
  password: !secret mqttpwd
  topic_prefix: train
  id: mqtt_ha
  on_json_message:
    topic: train/rocrail/command
    then:
      - lambda: |-
          float bright;
          std::string server(x["server"]);
          std::string type(x["type"]);
          ESP_LOGD("avant test"," %s, %s", x["type"], server.c_str());
          if (type == "co" && server != "mqttreader") {
            std::string lumiere(x["id"]);
            std::string cmd(x["cmd"]);
            bright=x["value"];
            ESP_LOGD("apres test"," %s, %s, %f",lumiere.c_str() , cmd.c_str(), bright);
            switch(hash(lumiere)) {
              case "GareB"_hash:{
                  if (cmd == "on"){
                    auto call = id(GareH).turn_on();
                    call.perform();
                  }else{
                    auto call = id(GareH).turn_off();
                    call.perform();
                  }
                }
                break;
              case "GareH"_hash:{
                  if (cmd == "on"){
                    auto call = id(GareH).turn_on();
                    call.perform();
                  }else{
                    auto call = id(GareH).turn_off();
                    call.perform();
                  }
                }
                break;
              }
           }


output:
  - platform: pca9685
    channel: 0
    id: pwm00
  - platform: pca9685
    channel: 1
    id: pwm01

light:
  - platform: monochromatic
    name: 'GareB'
    id: GareB
    output: pwm00
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - mqtt.publish:
            topic: rocrail/service/client
            payload: '<co id="GareB" cmd="on"/>'
    on_turn_off:
      then:
        - mqtt.publish:
            topic: rocrail/service/client
            payload: '<co id="GareB" cmd="off"/>'

  - platform: monochromatic
    name: 'GareH'
    id: GareH
    output: pwm01
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - mqtt.publish:
            topic: rocrail/service/client
            payload: '<co id="GareH" cmd="on"/>'
    on_turn_off:
      then:
        - mqtt.publish:
            topic: rocrail/service/client
            payload: '<co id="GareH" cmd="off"/>'

