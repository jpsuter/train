esphome:
  name: train-base
  includes: std_includes.h

esp32:
  board: esp32dev
  framework:
    type: esp-idf

logger:

api:

ota:
  platform: esphome

#ethernet:
#  type: LAN8720
#  mdc_pin: GPIO23
#  mdio_pin: GPIO18
#  clk_mode: GPIO17_OUT
#  phy_addr: 0
wifi:
  ssid: !secret SSID
  password: !secret password
  manual_ip:
    static_ip: 10.4.200.235
    gateway: 10.4.200.254
    subnet: 255.255.255.0

i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

pca9685:
  - id: pca9685_hub1
    frequency: 500

mcp23017:
  - id: 'mcp23017_hub1'
    address: 0x20
  - id: 'mcp23017_hub2'
    address: 0x21
  - id: 'mcp23017_hub3'
    address: 0x22
  - id: 'mcp23017_hub4'
    address: 0x23


mqtt:
  broker: 10.4.200.220
  discovery: false
  username: !secret mqtt
  password: !secret mqttpwd
  id: mqtt_ha
  on_json_message:
    - topic: train/rocrail/command
      then:
        - lambda: |-
            float bright;
            std::string server(x["server"]);
            std::string type(x["type"]);
            if (type == "co" && server != "mqttreader") {
              std::string lumiere(x["id"]);
              std::string cmd(x["cmd"]);
              bright=x["value"];
              auto lights=App.get_lights();
              int index=lights.size();
              for(unsigned int i = 0; i < lights.size(); i++) {
                if (lights[i]->get_name() == lumiere) index=i;
              }
              if (index == lights.size())
                ESP_LOGD("erreur", "index: %i", index);
              else {
                if (cmd == "on")
                  lights[index]->turn_on().perform();
                else
                  lights[index]->turn_off().perform();
              }
            }
            if (type == "sys" && server != "mqttreader") {
              std::string cmd(x["cmd"]);
              if (cmd == "go")
                id(AlimRail).publish_state(true);
              else
                id(AlimRail).publish_state(false);
            }
            if (type == "auto" && server != "mqttreader") {
              std::string cmd(x["cmd"]);
              if (cmd == "on")
                id(ModeAuto).publish_state(true);
              else
                id(ModeAuto).publish_state(false);
            }
            if (type == "lc" && server != "mqttreader") {
              std::string loco(x["id"]);
              if (x.containsKey("V")){
                int vitesse(x["V"]);
                std::string loco1=loco+"V";
                auto nombres=App.get_numbers();
                int index=nombres.size();
                for(unsigned int i = 0; i < nombres.size(); i++) {
                  if (nombres[i]->get_name() == loco1) index=i;
                }
                if (index == nombres.size())
                  ESP_LOGD("erreur", "index: %i", index);
                else
                  nombres[index]->publish_state(vitesse);
              }
              if (x.containsKey("dir")){
                std::string dir(x["dir"]);
                std::string loco1=loco+"A";
                auto  selects=App.get_selects();
                int index=selects.size();
                for(unsigned int i = 0; i < selects.size(); i++) {
                  if (selects[i]->get_name() == loco1) index=i;
                }
                if (index == selects.size())
                  ESP_LOGD("erreur", "index: %i", index);
                else 
                  if (dir == "true")
                    selects[index]->publish_state("avant");
                  else
                    selects[index]->publish_state("arriere");
              }
            }
            if (type == "fn" && server != "mqttreader") {
              std::string loco(x["id"]);
              std::string funcno(x["fnchanged"]);
              int no_f = std::stoi(funcno);
              std::string funcval0(x["f0"]);
              std::string funcval1(x["f1"]);
              std::string funcval6(x["f6"]);
              std::string funcval;
              switch (no_f){
                case 0:
                  funcval=funcval0;
                  break;
                case 1:
                  funcval=funcval1;
                  break;
                case 6:
                  funcval=funcval6;
                  break;
              }
              std::string loco1=loco+"f"+std::to_string(no_f);
              auto switchs=App.get_switches();
              int index=switchs.size();
              for(unsigned int i = 0; i < switchs.size(); i++) {
                if (switchs[i]->get_name() == loco1) index=i;
              }
              if (index == switchs.size())
                ESP_LOGD("erreur", "index: %i, %s", index, loco1.c_str());
              else
                if (funcval=="true")
                  switchs[index]->turn_on();
                else
                  switchs[index]->turn_off();
            }
            if (type == "sw" && server != "mqttreader") {
              std::string aiguilage(x["id"]);
              std::string sens(x["cmd"]);
              auto selects=App.get_selects();
              int index=selects.size();
              for(unsigned int i = 0; i < selects.size(); i++) {
                if (selects[i]->get_name() == aiguilage) index=i;
              }
              if (index == selects.size())
                ESP_LOGD("erreur", "index: %i", index);
              else
                selects[index]->publish_state(sens);
             }


output:
  - platform: pca9685
    channel: 0
    id: pwm00
  - platform: pca9685
    channel: 1
    id: pwm01
  - platform: pca9685
    channel: 2
    id: pwm02
  - platform: pca9685
    channel: 3
    id: pwm03
  - platform: pca9685
    channel: 4
    id: pwm04
  - platform: pca9685
    channel: 5
    id: pwm05
  - platform: pca9685
    channel: 6
    id: pwm06
  - platform: pca9685
    channel: 7
    id: pwm07
  - platform: pca9685
    channel: 8
    id: pwm08
  - platform: pca9685
    channel: 9
    id: pwm09
  - platform: pca9685
    channel: 10
    id: pwm10
  - platform: pca9685
    channel: 11
    id: pwm11
  - platform: pca9685
    channel: 12
    id: pwm12
  - platform: pca9685
    channel: 13
    id: pwm13
  - platform: pca9685
    channel: 14
    id: pwm14
  - platform: pca9685
    channel: 15
    id: pwm15

packages:
  br206: !include
    file: locomotives.yaml
    vars:
      loco: BR206
  br23: !include
    file: locomotives.yaml
    vars:
      loco: BR23
  br74: !include
    file: locomotives.yaml
    vars:
      loco: BR74
  db798: !include
    file: locomotives.yaml
    vars:
      loco: DB798
  db798f0: !include
    file: locolum.yaml
    vars:
      loco: DB798
      fnum: 0
  db798f1: !include
    file: locolum.yaml
    vars:
      loco: DB798
      fnum: 1
  db798f6: !include
    file: locolum.yaml
    vars:
      loco: DB798
      fnum: 6
  br206f0: !include
    file: locolum.yaml
    vars:
      loco: BR206
      fnum: 0
  br23f0: !include
    file: locolum.yaml
    vars:
      loco: BR23
      fnum: 0
  br74f0: !include
    file: locolum.yaml
    vars:
      loco: BR74
      fnum: 0
  out0: !include
    file: outputs.yaml
    vars:
      nom: out00
      multiplex: mcp23xxx
      hub: mcp23017_hub3
      num: 0
  out1: !include
    file: outputs.yaml
    vars:
      nom: out01
      multiplex: mcp23xxx
      hub: mcp23017_hub3
      num: 1
  detect1: !include
    file: detecteurs.yaml
    vars:
      nom: gh1_enter
      multiplex: mcp23xxx
      hub: mcp23017_hub1
      pin: 0
  aiguil1: !include
    file: aiguillages.yaml
    vars:
      nom: GH45In
      sortieS: out00
      sortieT: out01
  lum1: !include
    file: lumieres.yaml
    vars:
      nom: GareB
      sortie: pwm00
  lum2: !include
    file: lumieres.yaml
    vars:
      nom: QuaiB
      sortie: pwm01
  lum3: !include
    file: lumieres.yaml
    vars:
      nom: GareH
      sortie: pwm02
  lum4: !include
    file: lumieres.yaml
    vars:
      nom: Eglise
      sortie: pwm03
  lum5: !include
    file: lumieres.yaml
    vars:
      nom: Maison1
      sortie: pwm04

switch:
  - platform: template
    id: AlimRail
    name: "Alimentation rails"
    icon: mdi:fence-electric
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    on_turn_on:
      then:
        - mqtt.publish:
            topic: rocrail/service/client
            payload: '<sys cmd="go"/>'
    on_turn_off:
      then:
        - mqtt.publish:
            topic: rocrail/service/client
            payload: '<sys cmd="stop"/>'
  - platform: template
    id: ModeAuto
    name: "Automatique"
    icon: mdi:refresh-auto
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    on_turn_on:
      then:
        - mqtt.publish:
            topic: rocrail/service/client
            payload: '<auto cmd="on"/>'
    on_turn_off:
      then:
        - mqtt.publish:
            topic: rocrail/service/client
            payload: '<auto cmd="off"/>'

